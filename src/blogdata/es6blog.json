{
    "title":"How to learn es6blog",
    "content":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>ES6 (ECMAScript 2015) Overview<\/title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            line-height: 1.6;\r\n            margin: 0;\r\n           \r\n            background-color: #f4f4f4;\r\n        }\r\n\r\n        h1, h2, h3 {\r\n            color: #333;\r\n        }\r\n\r\n        h1 {\r\n            text-align: center;\r\n        }\r\n\r\n        code {\r\n            background-color: #f4f4f4;\r\n            padding: 2px 5px;\r\n            border-radius: 3px;\r\n            color: #c7254e;\r\n        }\r\n\r\n        pre {\r\n            background-color: #f4f4f4;\r\n            padding: 10px;\r\n            border: 1px solid #ddd;\r\n            border-radius: 5px;\r\n            white-space: pre-wrap;\r\n        }\r\n\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 5px;\r\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n        }\r\n\r\n        ul {\r\n            margin-left: 20px;\r\n        }\r\n\r\n        li {\r\n            margin: 5px 0;\r\n        }\r\n    <\/style>\r\n<\/head>\r\n<body>\r\n\r\n    <div class=\"container\">\r\n        <h1>ES6 (ECMAScript 2015) Overview<\/h1>\r\n        \r\n        <h2>1. <code>let<\/code> and <code>const<\/code><\/h2>\r\n        <p>ES6 introduced two new ways to declare variables:<\/p>\r\n        <ul>\r\n            <li><strong>let:<\/strong> Block-scoped variable declaration.<\/li>\r\n            <li><strong>const:<\/strong> Declares constants that cannot be reassigned.<\/li>\r\n        <\/ul>\r\n        <pre><code>let name = 'John';\r\nif (true) {\r\n    let age = 25;\r\n    console.log(age); \/\/ 25\r\n}\r\nconsole.log(age); \/\/ ReferenceError: age is not defined<\/code><\/pre>\r\n\r\n        <h2>2. Arrow Functions<\/h2>\r\n        <p>Arrow functions provide a more concise syntax for writing functions and lexically bind the <code>this<\/code> context.<\/p>\r\n        <pre><code>const sum = (a, b) => a + b;<\/code><\/pre>\r\n\r\n        <h2>3. Template Literals<\/h2>\r\n        <p>Template literals allow for multi-line strings and string interpolation using backticks <code>`<\/code> and placeholders <code>${'expression'}<\/code>.<\/p>\r\n        <pre><code>let name = 'Alice';\r\nlet greeting = `Hello, ${name}!`;\r\nlet multiLineString = `This is a\r\nmulti-line string`;<\/code><\/pre>\r\n\r\n        <h2>4. Default Parameters<\/h2>\r\n        <p>ES6 allows setting default parameter values in function declarations.<\/p>\r\n        <pre><code>function greet(name = 'Guest') {\r\n    console.log(`Hello, ${name}!`);\r\n}<\/code><\/pre>\r\n\r\n        <h2>5. Destructuring Assignment<\/h2>\r\n        <p>Destructuring allows extracting values from arrays or objects into distinct variables.<\/p>\r\n        <pre><code>const [a, b] = [10, 20];\r\nconst { name, age } = { name: 'John', age: 30 };<\/code><\/pre>\r\n\r\n        <h2>6. Rest and Spread Operators<\/h2>\r\n        <p>Both rest <code>...<\/code> and spread <code>...<\/code> operators simplify working with arrays, objects, and function arguments.<\/p>\r\n        <pre><code>\/\/ Rest Operator\r\nfunction sum(...numbers) {\r\n    return numbers.reduce((acc, num) => acc + num, 0);\r\n}\r\n\r\n\/\/ Spread Operator\r\nconst arr = [1, 2, ...[3, 4]];<\/code><\/pre>\r\n\r\n        <h2>7. Classes<\/h2>\r\n        <p>ES6 introduced a class syntax that is more intuitive for creating objects and supporting inheritance.<\/p>\r\n        <pre><code>class Person {\r\n    constructor(name, age) {\r\n        this.name = name;\r\n        this.age = age;\r\n    }\r\n    greet() {\r\n        console.log(`Hello, my name is ${this.name}`);\r\n    }\r\n}<\/code><\/pre>\r\n\r\n        <h2>8. Modules<\/h2>\r\n        <p>ES6 introduced native support for modules with <code>import<\/code> and <code>export<\/code>.<\/p>\r\n        <pre><code>\/\/ module.js\r\nexport const pi = 3.14159;\r\n\r\n\/\/ main.js\r\nimport { pi } from '.\/module';<\/code><\/pre>\r\n\r\n        <h2>9. Promises<\/h2>\r\n        <p>Promises are used for handling asynchronous operations.<\/p>\r\n        <pre><code>const promise = new Promise((resolve, reject) => {\r\n    let success = true;\r\n    if (success) {\r\n        resolve('Operation was successful');\r\n    } else {\r\n        reject('Operation failed');\r\n    }\r\n});<\/code><\/pre>\r\n\r\n        <h2>10. Iterators and Generators<\/h2>\r\n        <p>Generators can pause and resume their execution, and are written using the <code>function*<\/code> syntax.<\/p>\r\n        <pre><code>function* generator() {\r\n    yield 1;\r\n    yield 2;\r\n    yield 3;\r\n}<\/code><\/pre>\r\n\r\n        <h2>11. Map, Set, WeakMap, and WeakSet<\/h2>\r\n        <p>ES6 introduced new data structures for storing collections of data:<\/p>\r\n        <ul>\r\n            <li><strong>Map:<\/strong> Stores key-value pairs.<\/li>\r\n            <li><strong>Set:<\/strong> Stores unique values.<\/li>\r\n        <\/ul>\r\n        <pre><code>const map = new Map();\r\nmap.set('name', 'John');<\/code><\/pre>\r\n\r\n        <h2>12. Symbols<\/h2>\r\n        <p>Symbols are unique and immutable primitive types used to define property keys without conflict.<\/p>\r\n        <pre><code>const sym = Symbol('description');\r\nconst obj = { [sym]: 'value' };<\/code><\/pre>\r\n\r\n        <h3>Conclusion<\/h3>\r\n        <p>ES6 introduced many new features that make JavaScript more concise and powerful, enabling the development of more complex applications with greater ease and readability.<\/p>\r\n    <\/div>\r\n\r\n<\/body>\r\n<\/html>\r\n",
    "author":"Brendan Eich",
    "metaDesc":"How to learn nextjs,you will learn more knowledge of nextjs in few minutes",
    "slugs":"es6blog"
    
}
